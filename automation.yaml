# The parameters in the script marked with an asterisk (*) are placeholders that need to be customized by the user.
# sensor.solarflow_pack_state = Battery pack status: 0 = Standby, 1 = Charging, 2 = Discharging.
# In the Zendure app, the discharge limit has to be set to a high value of your choosing.
# Example settings in the Zendure app (without liability):
# Discharge limit: 800, Bypass: Auto, Minimum reserved battery: 20%, Charging limit: 100%, Everything else: Default.
# Use at your own risk, I assume no liability.

alias: PV Reduced Feed-in Control
description: Automation for controlling PV/battery feed-in to reduce grid feed-in from the battery but donates excess energy from the panels to the grid
trigger:
  - platform: time_pattern
    seconds: /16
  - platform: state
    entity_id: sensor.solarflow_pack_state
  - platform: numeric_state
    entity_id: sensor.solarflow_solar_input_power
    above: 500
    enabled: false
  - platform: numeric_state
    entity_id: sensor.*from grid*
    above: 1
    enabled: false
  - platform: numeric_state
    entity_id: sensor.*to grid*
    above: 1
    enabled: false
condition: []
action:
  - choose:
      - conditions:
          - condition: state
            entity_id: sensor.solarflow_pack_state
            state: "0" # battery in standby
            for:
              hours: 0
              minutes: 0
              seconds: 30
          - condition: and
            conditions: []
        sequence:
          - service: number.set_value
            target:
              entity_id: number.*your inverter*limit_nonpersistent_absolute
            data:
              value: >-
                {% set *to grid* = states('sensor.*to grid*') | int %}
                {% set *from grid* = states('sensor.*from grid*') | int %}
                {% set solarflow_pack_input_power = states('sensor.solarflow_pack_input_power') | int %}
                {% if solarflow_pack_input_power > 0 %}
                  {% set values = [0, 60 - *to grid* + *from grid*, 100] | sort %}
                  {{ values[1] }}
                {% else %}
                  {{ [70 - (states('sensor.*to grid*') | int), ((states('sensor.solarflow_solar_input_power') | int) + 24)] | max }}
                {% endif %}
              # this donates the excess energy produced by the panels to the grid if the battery is in standby. In case pack state is not reported
              # in a timely manner, there is additional logic not to drain the battery by accident.
      - conditions:
          - condition: state
            entity_id: sensor.solarflow_pack_state
            state: "1" # battery is charging
            for:
              hours: 0
              minutes: 0
              seconds: 30
          - condition: numeric_state
            entity_id: sensor.solarflow_solar_input_power
            above: 500
        sequence:
          - service: number.set_value
            target:
              entity_id:
                - number.*your inverter*limit_persistent_absolute
                - number.*your inverter*limit_nonpersistent_absolute
            data_template:
              value: >
                {% set solar_input = states('sensor.solarflow_solar_input_power') | int %} 
                {% set base_value = 100 + max(solar_input - 500, 0) %} 
                {% set *from grid* = states('sensor.*from grid*') | int %} 
                {% set *to grid* = states('sensor.*to grid*') | int %} 
                {% set dynamic_value = states('number.*your inverter*limit_nonpersistent_absolute') | int %}

                {% if *from grid* > 0 %}
                  {% set dynamic_value = dynamic_value + *from grid* %}
                {% elif *to grid* > 0 %}
                  {% set dynamic_value = dynamic_value - *to grid* %}
                {% endif %}

                {% set values = [0, base_value, dynamic_value] | sort %} 
                {{ values[1] }} 
              # allows dynamic adjustment to your needs if production from the panels is > 500 W
      - conditions:
          - condition: state
            entity_id: sensor.solarflow_pack_state
            state: "1" # battery is charging
            for:
              hours: 0
              minutes: 0
              seconds: 30
          - condition: numeric_state
            entity_id: sensor.solarflow_solar_input_power
            below: 500
        sequence:
          - service: number.set_value
            target:
              entity_id: >-
                number.*your inverter*limit_persistent_absolute,
                number.*your inverter*limit_nonpersistent_absolute
            data_template:
              value: >
                {% set base_value = states('number.*your inverter*limit_nonpersistent_absolute') | int %}
                {% set *from grid* = states('sensor.*from grid*') | int %} 
                {% set *to grid* = states('sensor.*to grid*') | int %} 
                {% if *from grid* > 0 %}
                  {% set dynamic_value = base_value + *from grid* %}
                {% elif *to grid* > 0 %}
                  {% set dynamic_value = base_value - *to grid* %}
                {% else %}
                  {% set dynamic_value = base_value %}
                {% endif %} {% set values = [0, 100, dynamic_value] | sort %} 
                {{ values[1] }} 
              # allows dynamic adjustment to your needs between 0 and 100 if production from the panels is < 500 W
      - conditions:
          - condition: state
            entity_id: sensor.solarflow_pack_state
            state: "1" # battery is charging
            for:
              hours: 0
              minutes: 0
              seconds: 30
          - condition: numeric_state
            entity_id: sensor.solarflow_electric_level
            above: 96
        sequence:
          - service: number.set_value
            target:
              entity_id:
                - number.*your inverter*limit_persistent_absolute
                - number.*your inverter*limit_nonpersistent_absolute
            data_template:
              value: >
                {% set base_value = states('number.*your inverter*limit_nonpersistent_absolute') | int %}
                {% set *from grid* = states('sensor.*from grid*') | int %} 
                {% set *to grid* = states('sensor.*to grid*') | int %} 
                {% set pv_production = states('sensor.solarflow_solar_input_power') | int %} 
                {% if pv_production <= 200 %}
                  {% if *from grid* > 0 %}
                    {% set dynamic_value = base_value + *from grid* %}
                  {% elif *to grid* > 0 %}
                    {% set dynamic_value = base_value - *to grid* %}
                  {% else %}
                    {% set dynamic_value = base_value %}
                  {% endif %}
                  {% set values = [0, 80, dynamic_value] | sort %}
                  {% set dynamic_value = values[1] %}
                {% else %}
                  {% set dynamic_value = pv_production - *to grid* - 150 %}
                {% endif %} {{ dynamic_value }} 
              # allows dynamic adjustment to your needs when charging the battery above 97% slows down
      - conditions:
          - condition: state
            entity_id: sensor.solarflow_pack_state
            state: "2" # battery is discharging
            for:
              hours: 0
              minutes: 0
              seconds: 30
        sequence:
          - service: number.set_value
            target:
              entity_id: >-
                number.*your inverter*limit_persistent_absolute,
                number.*your inverter*limit_nonpersistent_absolute
            data_template:
              value: >
                {% set base_value = states('number.*your inverter*limit_nonpersistent_absolute') | int %}
                {% set *from grid* = states('sensor.*from grid*') | int %} 
                {% set *to grid* = states('sensor.*to grid*') | int %} 
                {% if *from grid* > 0 %}
                  {% set dynamic_value = base_value + *from grid* %}
                {% elif *to grid* > 0 %}
                  {% set dynamic_value = base_value - *to grid* %}
                {% else %}
                  {% set dynamic_value = base_value %}
                {% endif %} {% set values = [0, 100, dynamic_value] | sort %} 
                {{ values[1] }} 
              # allows dynamic adjustment to your needs between 0 and 100
    default:
      - service: number.set_value
        target:
          entity_id:
            - number.*your inverter*limit_persistent_absolute
            - number.*your inverter*limit_nonpersistent_absolute
        data_template:
          value: >
            {% set base_value = states('number.*your inverter*limit_nonpersistent_absolute') | int %} 
            {% set *from grid* = states('sensor.*from grid*') | int %} 
            {% set *to grid* = states('sensor.*to grid*') | int %}
            {% if *from grid* > 0 %}
              {% set dynamic_value = base_value + *from grid* %}
            {% elif *to grid* > 0 %}
              {% set dynamic_value = base_value - *to grid* %}
            {% else %}
              {% set dynamic_value = base_value %}
            {% endif %} {% set values = [0, 80, dynamic_value] | sort %} 
            {{ values[1] }} 
          # allows dynamic adjustment to your needs between 0 and 80 if no state is available
mode: restart
